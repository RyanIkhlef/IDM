modeltype markdownMM "strict" uses "http://www.example.org/simplemarkdown";
modeltype usdMM "strict" uses "http://www.example.org/usd";
	
transformation markdown2USD(in markdown : markdownMM, out usd : usdMM ) {

main() {
	if(markdown.rootObjects() -> selectByType(Folder) -> notEmpty()) {
		markdown.rootObjects()[Folder] -> map folder2site();
	} else if(markdown.rootObjects() -> selectByType(Document) -> notEmpty()) {
		markdown.rootObjects()[Document] -> forEach(doc) { doc -> map document2page(); };
	} else { 
		log("not a website structure.");
	}
}

mapping markdownMM::Folder::folder2site() : usdMM::SiteRoot {
	name := self.name;
	self.documents -> selectByType(Document) -> forEach(doc) { pages += doc -> map document2page(); };
}

mapping markdownMM::Document::document2page() : usdMM::Page {
	name := self.name;
	self.contents -> forEach(elem) {
		-- textContainer mapping :
		if(elem.oclIsTypeOf(Paragraph)) {
			elements += elem[Paragraph] -> map mdParagraph2usdParagraph();
		} else if (elem.oclIsTypeOf(Title)) {
			elements += elem[Title] -> map mdTitle2usdTitle();
		} else if (elem.oclIsTypeOf(Text)) {
			elements += elem[Text] -> map mdText2usdText();
		} else if (elem.oclIsTypeOf(StrongEmphasis)) {
			elements += elem[StrongEmphasis] -> map strongEmphasis2importantText();
		} else if (elem.oclIsTypeOf(Emphasis)) {
			elements += elem[Emphasis] -> map mdEmphasis2usdEmphasis();
		} else if (elem.oclIsTypeOf(Link)) {
			elements += elem[Link] -> map mdLink2usdLink();
		} else if (elem.oclIsTypeOf(Image)) {
			elements += elem[Image] -> map mdImage2usdImage();
		} else if (elem.oclIsTypeOf(Code)) {
			elements += elem[Code] -> map mdCode2usdCode();
		} 
		
		-- other block items mapping :
		else if (elem.oclIsTypeOf(CodeBlock)) {
			elements += elem[CodeBlock] -> map mdCodeBlock2usdCodeBlock();
		} else if (elem.oclIsTypeOf(BlockQuote)) {
			elements += elem[BlockQuote] -> map mdBlockQuote2usdBlockQuote();
		} else if (elem.oclIsTypeOf(HorizontalLine)) {
			elements += elem[HorizontalLine] -> map  mdHorizontalLine2usdLine();
		} else if (elem.oclIsTypeOf(BulletList)) {
			elements += elem[BulletList] -> map mdBulletList2usdUnordoredList();
		} else if (elem.oclIsTypeOf(OrderedList)) {
			elements += elem[OrderedList] -> map mdOrderedList2usdOrdoredList();
		} else {
			log("Transformation pas prise en charge dans une page : " + elem.toString());
		};
	};
}

mapping markdownMM::Paragraph::mdParagraph2usdParagraph() : usdMM::Paragraph {
	self.elements -> forEach(elem) {
		if(elem.oclIsTypeOf(Text)) {
			contents += elem[Text] -> map mdText2usdText();
		} else if(elem.oclIsTypeOf(StrongEmphasis)) {
			contents += elem[StrongEmphasis] -> map strongEmphasis2importantText();
		} else if(elem.oclIsTypeOf(Emphasis)) {
			contents += elem[Emphasis] -> map mdEmphasis2usdEmphasis();
		} else if(elem.oclIsTypeOf(Link)) {
			contents += elem[Link] -> map mdLink2usdLink();
		} else if(elem.oclIsTypeOf(Image)) {
			contents += elem[Image] -> map mdImage2usdImage();
		} else if(elem.oclIsTypeOf(Code)) {
			contents += elem[Code] -> map mdCode2usdCode();
		} else {
			log("Transformation pas prise en charge dans un paragraphe : " + elem.toString());
		};
	};
}

mapping markdownMM::Title::mdTitle2usdTitle() : usdMM::Title {
	classes := 'title_level_' + self.level.toString();
	level := self.level;
	
	self.elements -> forEach(elem) {
		if(elem.oclIsTypeOf(Text)) {
			contents += elem[Text] -> map mdText2usdText();
		} else if(elem.oclIsTypeOf(StrongEmphasis)) {
			contents += elem[StrongEmphasis] -> map strongEmphasis2importantText();
		} else if(elem.oclIsTypeOf(Emphasis)) {
			contents += elem[Emphasis] -> map mdEmphasis2usdEmphasis();
		} else if(elem.oclIsTypeOf(Link)) {
			contents += elem[Link] -> map mdLink2usdLink();
		} else if(elem.oclIsTypeOf(Image)) {
			contents += elem[Image] -> map mdImage2usdImage();
		} else if(elem.oclIsTypeOf(Code)) {
			contents += elem[Code] -> map mdCode2usdCode();
		} else {
			log("Transformation pas prise en charge dans un titre : " + elem.toString());
		};
	};	
}

mapping markdownMM::Text::mdText2usdText() : usdMM::Text {
	textContent := self.text;
}

mapping markdownMM::StrongEmphasis::strongEmphasis2importantText() : usdMM::ImportantText {
	textContent := self.text;
}

mapping markdownMM::Emphasis::mdEmphasis2usdEmphasis() : usdMM::Emphasis {
	textContent := self.text;
}

mapping markdownMM::Link::mdLink2usdLink() : usdMM::Link {
	classes := '';
	self.textElements -> selectByType(Text) -> forEach(t) { 
		classes := t.text.concat(classes);
	};
	src := self.url;
	textContent := self.text;

	title := self.title;
}

mapping markdownMM::Image::mdImage2usdImage() : usdMM::Image {
	imgSrc := self.url;
	alt := self.text;
	title := self.title;
}


mapping markdownMM::Code::mdCode2usdCode() : usdMM::Code {
	textContent := self.text;
}

mapping markdownMM::CodeBlock::mdCodeBlock2usdCodeBlock() : usdMM::CodeBlock {
	self.codelines -> selectByType(CodeLine) -> forEach(cl) { codelines += cl -> map mdCodeLine2usdCodeLine(); };
}

mapping markdownMM::CodeLine::mdCodeLine2usdCodeLine() : usdMM::CodeLine {
	textContent := self.text;
}

mapping markdownMM::BlockQuote::mdBlockQuote2usdBlockQuote() : usdMM::BlockQuote {
	self.contents -> forEach(elem) {
		if(elem.oclIsTypeOf(Paragraph)) {
			quotes += elem[Paragraph] -> map mdParagraph2usdParagraph();
		} else if(elem.oclIsTypeOf(Title)) {
			quotes += elem[Title] -> map mdTitle2usdTitle();
		} else if(elem.oclIsTypeOf(Text)) {
			quotes += elem[Text] -> map mdText2usdText();
		} else if(elem.oclIsTypeOf(StrongEmphasis)) {
			quotes += elem[StrongEmphasis] -> map strongEmphasis2importantText();
		} else if(elem.oclIsTypeOf(Emphasis)) {
			quotes += elem[Emphasis] -> map mdEmphasis2usdEmphasis();
		} else if(elem.oclIsTypeOf(Link)) {
			quotes += elem[Link] -> map mdLink2usdLink();
		} else if(elem.oclIsTypeOf(Image)) {
			quotes += elem[Image] -> map mdImage2usdImage();
		} else if(elem.oclIsTypeOf(Code)) {
			quotes += elem[Code] -> map mdCode2usdCode();
		} 
		
		else if(elem.oclIsTypeOf(CodeBlock)) {
			quotes += elem[CodeBlock] -> map mdCodeBlock2usdCodeBlock();
		}  else if(elem.oclIsTypeOf(BlockQuote)) {
			quotes += elem[BlockQuote] -> map mdBlockQuote2usdBlockQuote();
		} else if(elem.oclIsTypeOf(HorizontalLine)) {
			quotes += elem[HorizontalLine] -> map mdHorizontalLine2usdLine();
		} else if(elem.oclIsTypeOf(BulletList)) {
			quotes += elem[BulletList] -> map mdBulletList2usdUnordoredList();
		} else if(elem.oclIsTypeOf(OrderedList)) {
			quotes += elem[OrderedList] -> map mdOrderedList2usdOrdoredList();
		} else {
			log("Transformation pas prise en charge dans un block quote : " + elem.toString());
		};
	};
}

mapping markdownMM::HorizontalLine::mdHorizontalLine2usdLine() : usdMM::Line {}

mapping markdownMM::BulletList::mdBulletList2usdUnordoredList() : usdMM::UnorderedList {
	self.items.elements -> forEach(elem) {
		if(elem.oclIsTypeOf(Paragraph)) {
			listElement += elem[Paragraph] -> map mdParagraph2usdParagraph();
		} else if (elem.oclIsTypeOf(CodeBlock)) {
			listElement += elem[CodeBlock] -> map mdCodeBlock2usdCodeBlock();
		} else if (elem.oclIsTypeOf(BlockQuote)) {
			listElement += elem[BlockQuote] -> map mdBlockQuote2usdBlockQuote();
		} else if (elem.oclIsTypeOf(BulletList)) {
			listElement += elem[BulletList] -> map mdBulletList2usdUnordoredList();
		} else if (elem.oclIsTypeOf(OrderedList)) {
			listElement += elem[OrderedList] -> map mdOrderedList2usdOrdoredList();
		} else {
			log("Transformation pas prise en charge dans une liste non-ordonnée : " + elem.toString());
		};
	};
}

mapping markdownMM::OrderedList::mdOrderedList2usdOrdoredList() : usdMM::OrderedList {
	self.items.elements -> forEach(elem) {
		if(elem.oclIsTypeOf(Paragraph)) {
			listElement += elem[Paragraph] -> map mdParagraph2usdParagraph();
		} else if (elem.oclIsTypeOf(CodeBlock)) {
			listElement += elem[CodeBlock] -> map mdCodeBlock2usdCodeBlock();
		} else if (elem.oclIsTypeOf(BlockQuote)) {
			listElement += elem[BlockQuote] -> map mdBlockQuote2usdBlockQuote();
		} else if (elem.oclIsTypeOf(BulletList)) {
			listElement += elem[BulletList] -> map mdBulletList2usdUnordoredList();
		} else if (elem.oclIsTypeOf(OrderedList)) {
			listElement += elem[OrderedList] -> map mdOrderedList2usdOrdoredList();
		} else {
			log("Transformation pas prise en charge dans une liste ordonnée : " + elem.toString());
		};
	};
}

}