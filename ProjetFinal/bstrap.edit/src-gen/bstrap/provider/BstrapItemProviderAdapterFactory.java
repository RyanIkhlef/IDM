/**
 */
package bstrap.provider;

import bstrap.util.BstrapAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BstrapItemProviderAdapterFactory extends BstrapAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BstrapItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.SiteRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SiteRootItemProvider siteRootItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.SiteRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSiteRootAdapter() {
		if (siteRootItemProvider == null) {
			siteRootItemProvider = new SiteRootItemProvider(this);
		}

		return siteRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.Page} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageItemProvider pageItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.Page}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageAdapter() {
		if (pageItemProvider == null) {
			pageItemProvider = new PageItemProvider(this);
		}

		return pageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.ButtonGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonGroupItemProvider buttonGroupItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.ButtonGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonGroupAdapter() {
		if (buttonGroupItemProvider == null) {
			buttonGroupItemProvider = new ButtonGroupItemProvider(this);
		}

		return buttonGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.Navbar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavbarItemProvider navbarItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.Navbar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavbarAdapter() {
		if (navbarItemProvider == null) {
			navbarItemProvider = new NavbarItemProvider(this);
		}

		return navbarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.Image} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageItemProvider imageItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.Image}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageAdapter() {
		if (imageItemProvider == null) {
			imageItemProvider = new ImageItemProvider(this);
		}

		return imageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.Title} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TitleItemProvider titleItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.Title}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTitleAdapter() {
		if (titleItemProvider == null) {
			titleItemProvider = new TitleItemProvider(this);
		}

		return titleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.Paragraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParagraphItemProvider paragraphItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.Paragraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParagraphAdapter() {
		if (paragraphItemProvider == null) {
			paragraphItemProvider = new ParagraphItemProvider(this);
		}

		return paragraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.Text} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextItemProvider textItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.Text}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextAdapter() {
		if (textItemProvider == null) {
			textItemProvider = new TextItemProvider(this);
		}

		return textItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.PrimaryButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimaryButtonItemProvider primaryButtonItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.PrimaryButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimaryButtonAdapter() {
		if (primaryButtonItemProvider == null) {
			primaryButtonItemProvider = new PrimaryButtonItemProvider(this);
		}

		return primaryButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.SecondaryButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecondaryButtonItemProvider secondaryButtonItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.SecondaryButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecondaryButtonAdapter() {
		if (secondaryButtonItemProvider == null) {
			secondaryButtonItemProvider = new SecondaryButtonItemProvider(this);
		}

		return secondaryButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.SuccessButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuccessButtonItemProvider successButtonItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.SuccessButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuccessButtonAdapter() {
		if (successButtonItemProvider == null) {
			successButtonItemProvider = new SuccessButtonItemProvider(this);
		}

		return successButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.InfoButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfoButtonItemProvider infoButtonItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.InfoButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfoButtonAdapter() {
		if (infoButtonItemProvider == null) {
			infoButtonItemProvider = new InfoButtonItemProvider(this);
		}

		return infoButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.WarningButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WarningButtonItemProvider warningButtonItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.WarningButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWarningButtonAdapter() {
		if (warningButtonItemProvider == null) {
			warningButtonItemProvider = new WarningButtonItemProvider(this);
		}

		return warningButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.DarkButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DarkButtonItemProvider darkButtonItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.DarkButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDarkButtonAdapter() {
		if (darkButtonItemProvider == null) {
			darkButtonItemProvider = new DarkButtonItemProvider(this);
		}

		return darkButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.LightButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LightButtonItemProvider lightButtonItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.LightButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLightButtonAdapter() {
		if (lightButtonItemProvider == null) {
			lightButtonItemProvider = new LightButtonItemProvider(this);
		}

		return lightButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.LinkButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkButtonItemProvider linkButtonItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.LinkButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkButtonAdapter() {
		if (linkButtonItemProvider == null) {
			linkButtonItemProvider = new LinkButtonItemProvider(this);
		}

		return linkButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.DangerButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DangerButtonItemProvider dangerButtonItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.DangerButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDangerButtonAdapter() {
		if (dangerButtonItemProvider == null) {
			dangerButtonItemProvider = new DangerButtonItemProvider(this);
		}

		return dangerButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.CodeLine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CodeLineItemProvider codeLineItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.CodeLine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCodeLineAdapter() {
		if (codeLineItemProvider == null) {
			codeLineItemProvider = new CodeLineItemProvider(this);
		}

		return codeLineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.CodeBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CodeBlockItemProvider codeBlockItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.CodeBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCodeBlockAdapter() {
		if (codeBlockItemProvider == null) {
			codeBlockItemProvider = new CodeBlockItemProvider(this);
		}

		return codeBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.BoldText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoldTextItemProvider boldTextItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.BoldText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoldTextAdapter() {
		if (boldTextItemProvider == null) {
			boldTextItemProvider = new BoldTextItemProvider(this);
		}

		return boldTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.ItalicText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItalicTextItemProvider italicTextItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.ItalicText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItalicTextAdapter() {
		if (italicTextItemProvider == null) {
			italicTextItemProvider = new ItalicTextItemProvider(this);
		}

		return italicTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.UnorderedList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnorderedListItemProvider unorderedListItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.UnorderedList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnorderedListAdapter() {
		if (unorderedListItemProvider == null) {
			unorderedListItemProvider = new UnorderedListItemProvider(this);
		}

		return unorderedListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.OrderedList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrderedListItemProvider orderedListItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.OrderedList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrderedListAdapter() {
		if (orderedListItemProvider == null) {
			orderedListItemProvider = new OrderedListItemProvider(this);
		}

		return orderedListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.BlockQuote} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockQuoteItemProvider blockQuoteItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.BlockQuote}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockQuoteAdapter() {
		if (blockQuoteItemProvider == null) {
			blockQuoteItemProvider = new BlockQuoteItemProvider(this);
		}

		return blockQuoteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.Line} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LineItemProvider lineItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.Line}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLineAdapter() {
		if (lineItemProvider == null) {
			lineItemProvider = new LineItemProvider(this);
		}

		return lineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bstrap.Code} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CodeItemProvider codeItemProvider;

	/**
	 * This creates an adapter for a {@link bstrap.Code}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCodeAdapter() {
		if (codeItemProvider == null) {
			codeItemProvider = new CodeItemProvider(this);
		}

		return codeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (siteRootItemProvider != null)
			siteRootItemProvider.dispose();
		if (pageItemProvider != null)
			pageItemProvider.dispose();
		if (buttonItemProvider != null)
			buttonItemProvider.dispose();
		if (buttonGroupItemProvider != null)
			buttonGroupItemProvider.dispose();
		if (navbarItemProvider != null)
			navbarItemProvider.dispose();
		if (linkItemProvider != null)
			linkItemProvider.dispose();
		if (imageItemProvider != null)
			imageItemProvider.dispose();
		if (titleItemProvider != null)
			titleItemProvider.dispose();
		if (paragraphItemProvider != null)
			paragraphItemProvider.dispose();
		if (textItemProvider != null)
			textItemProvider.dispose();
		if (primaryButtonItemProvider != null)
			primaryButtonItemProvider.dispose();
		if (secondaryButtonItemProvider != null)
			secondaryButtonItemProvider.dispose();
		if (successButtonItemProvider != null)
			successButtonItemProvider.dispose();
		if (infoButtonItemProvider != null)
			infoButtonItemProvider.dispose();
		if (warningButtonItemProvider != null)
			warningButtonItemProvider.dispose();
		if (darkButtonItemProvider != null)
			darkButtonItemProvider.dispose();
		if (lightButtonItemProvider != null)
			lightButtonItemProvider.dispose();
		if (linkButtonItemProvider != null)
			linkButtonItemProvider.dispose();
		if (dangerButtonItemProvider != null)
			dangerButtonItemProvider.dispose();
		if (codeLineItemProvider != null)
			codeLineItemProvider.dispose();
		if (codeBlockItemProvider != null)
			codeBlockItemProvider.dispose();
		if (boldTextItemProvider != null)
			boldTextItemProvider.dispose();
		if (italicTextItemProvider != null)
			italicTextItemProvider.dispose();
		if (unorderedListItemProvider != null)
			unorderedListItemProvider.dispose();
		if (orderedListItemProvider != null)
			orderedListItemProvider.dispose();
		if (blockQuoteItemProvider != null)
			blockQuoteItemProvider.dispose();
		if (lineItemProvider != null)
			lineItemProvider.dispose();
		if (codeItemProvider != null)
			codeItemProvider.dispose();
	}

}
